<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"	"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap>
	
	<!-- 교사 수업 학생평가 목록 -->
	<select id="LecClssAppraiseDAO.selectLecClssAppraiseList" parameterClass="searchVO" resultClass="egovMap">
	/* LecClssAppraiseDAO.selectLecClssAppraiseList */
	<![CDATA[
		SELECT
			EVAL_SEQ
			, TLM.MEMBER_CODE
			, NAME
			, E_NAME
			, NATION
			, TEL
			, CASE WHEN EVAL_SEQ IS NULL THEN '' ELSE '완료' END AS EVAL_YN
			, EVAL_DATE
			, TLE.CONTENT
		FROM
			TB_LCMS_LECT_MAP TLLM
		LEFT JOIN
			TB_LCMS_MEMBER TLM ON TLLM.MEMBER_CODE = TLM.MEMBER_CODE
		LEFT JOIN
			TB_LCMS_EVAL TLE ON TLLM.LECT_SEQ = TLE.LECT_SEQ AND TLM.MEMBER_CODE = TLE.MEMBER_CODE
		WHERE
			TLLM.LECT_SEQ = #searchLecture#
		ORDER BY
			NAME ASC
	]]>
	</select>
	
	<!-- 교사 수업 학생평가 통계 -->
	<select id="LecClssAppraiseDAO.selectLecClssAppraiseStat" parameterClass="searchVO" resultClass="egovMap">
	/* LecClssAppraiseDAO.selectLecClssAppraiseStat */
	<![CDATA[
		SELECT
			COUNT(*) AS TOT_CNT
			, COUNT(CASE WHEN EVAL_SEQ IS NOT NULL THEN 1 END) PRO_CNT
			, COUNT(CASE WHEN EVAL_SEQ IS NULL THEN 1 END) NPRO_CNT
		FROM
			TB_LCMS_LECT_MAP TLLM
		LEFT JOIN
			TB_LCMS_EVAL TLE ON TLLM.LECT_SEQ = TLE.LECT_SEQ AND TLLM.MEMBER_CODE = TLE.MEMBER_CODE
		WHERE
			TLLM.LECT_SEQ = #searchLecture#
	]]>
	</select>
	
	<!-- 교사 수업 학생평가 조회 -->
	<select id="LecClssAppraiseDAO.selectLecClssAppraiseView" parameterClass="string" resultClass="evalVO">
	/* LecClssAppraiseDAO.selectLecClssAppraiseView */
	<![CDATA[
		SELECT
			EVAL_SEQ AS evalSeq
			, TLE.MEMBER_CODE AS memberCode
			, CONCAT(EVAL_DATE, (CASE DAYOFWEEK(EVAL_DATE) WHEN '1' THEN '(일)'
												  WHEN '2' THEN '(월)'
												  WHEN '3' THEN '(화)'
												  WHEN '4' THEN '(수)'
												  WHEN '5' THEN '(목)'
												  WHEN '6' THEN '(금)'
												  WHEN '7' THEN '(토)' END)) AS evalDate
			, (
				SELECT
					NAME
				FROM
					TB_LCMS_MEMBER
				WHERE
					MEMBER_CODE = PROF_CODE
			) AS profCode
			, NAME		AS name
			, E_NAME	AS eName
			, STATUS	AS status
			, STEP		AS step
			, NATION	AS nation
			, CONTENT	AS content
		FROM
			TB_LCMS_EVAL TLE
		LEFT JOIN
			TB_LCMS_MEMBER TLM ON TLE.MEMBER_CODE = TLM.MEMBER_CODE
		WHERE
			EVAL_SEQ = #evalSeq#
	]]>
	</select>

	<!-- 교사 수업 학생평가 조회 -->
	<select id="LecClssAppraiseDAO.selectLecClssAppraiseOne" parameterClass="string" resultClass="evalVO">
	/* LecClssAppraiseDAO.selectLecClssAppraiseOne */
	<![CDATA[
		SELECT
			EVAL_SEQ			AS evalSeq
			, TLE.MEMBER_CODE	AS memberCode
			, EVAL_DATE			AS evalDate
			, PROF_CODE 		AS profCode
			, NAME				AS name
			, E_NAME			AS eName
			, STATUS			AS status
			, STEP				AS step
			, NATION			AS nation
			, CONTENT			AS content
		FROM
			TB_LCMS_EVAL TLE
		LEFT JOIN
			TB_LCMS_MEMBER TLM ON TLE.MEMBER_CODE = TLM.MEMBER_CODE
		WHERE
			EVAL_SEQ = #evalSeq#
	]]>
	</select>
	
	<!-- 교수 수업 학생평가 등록 -->
	<insert id="LecClssAppraiseDAO.insertLecClssAppraise" parameterClass="evalVO">
	<selectKey keyProperty="evalSeq" resultClass="string" type="post">
		SELECT MAX(EVAL_SEQ) FROM TB_LCMS_EVAL
	</selectKey>
	/* LecClssAppraiseDAO.insertLecClssAppraise */
		INSERT INTO TB_LCMS_EVAL(
			LECT_SEQ
			, EVAL_DATE
			, MEMBER_CODE
			, PROF_CODE
			, CONTENT
		)VALUES(
			#lectSeq#
			, #evalDate#
			, #memberCode#
			, #profCode#
			, #content#
		)
	</insert>
	
	<update id="LecClssAppraiseDAO.updateLecClssAppraise" parameterClass="evalVO">
	/* LecClssAppraiseDAO.updateLecClssAppraise */
		UPDATE
			TB_LCMS_EVAL
		SET
			EVAL_DATE = #evalDate#
			, MEMBER_CODE = #memberCode#
			, PROF_CODE = #profCode#
			, CONTENT = #content#
		WHERE
			EVAL_SEQ = #evalSeq#
	</update>
	
	<!-- 교사 수업 학생평가 학생 조회 -->
	<select id="LecClssAppraiseDAO.selectLecClssMember" parameterClass="string" resultClass="evalVO">
	/* LecClssAppraiseDAO.selectLecClssMember */
	<![CDATA[
		SELECT
			MEMBER_CODE			AS memberCode
			, NAME				AS name
			, E_NAME			AS eName
			, STATUS			AS status
			, STEP				AS step
			, NATION			AS nation
		FROM
			TB_LCMS_MEMBER
		WHERE
			MEMBER_CODE = #memberCode#
	]]>
	</select>
	
	<select id="LecClssAppraiseDAO.lecClssAppraisePop" parameterClass="egovMap" resultClass="egovMap">
	/* LecClssAppraiseDAO.lecClssAppraisePop */
	<![CDATA[
		SELECT
			EVAL_SEQ
			, TLE.MEMBER_CODE
			, EVAL_DATE
			, (
				SELECT
					NAME
				FROM
					TB_LCMS_MEMBER
				WHERE
					MEMBER_CODE = PROF_CODE
			) AS PROF_NAME
			, NAME
			, E_NAME
			, STATUS
			, STEP
			, NATION
			, CONTENT
		FROM
			TB_LCMS_EVAL TLE
		LEFT JOIN
			TB_LCMS_MEMBER TLM ON TLE.MEMBER_CODE = TLM.MEMBER_CODE
		WHERE
			TLE.MEMBER_CODE = #memberCode#
	]]>
	</select>
	
	<select id="LecClssAppraiseDAO.lecClssAppraisePre" parameterClass="string" resultClass="egovMap">
	/* LecClssAppraiseDAO.lecClssAppraisePre */
	<![CDATA[
		SELECT
			TLLM.MEMBER_CODE
			, TLL.LECT_YEAR
			, TLL.LECT_SEM
			, TLL.LECT_CURR
			, TLL.LECT_PROG
			, GRADE
			, COMPLE_NUM
			, DATE_FORMAT(ENTER_REGI_S, '%Y년 %m월 %d일') AS ENTER_REGI_S
			, DATE_FORMAT(ENTER_REGI_S, '%M %d, %Y') AS REGI_S
			, DATE_FORMAT(ENTER_REGI_E, '%Y년 %m월 %d일') AS ENTER_REGI_E
			, DATE_FORMAT(ENTER_REGI_E, '%M %d, %Y') AS REGI_E
			, CASE LECT_SEM WHEN '1' THEN '봄학기'
							WHEN '2' THEN '여름학기'
							WHEN '3' THEN '가을학기'
							WHEN '4' THEN '겨울학기' END AS SEME_NM
			, CASE LECT_SEM WHEN '1' THEN 'SPRING'
							WHEN '2' THEN 'SUMMER'
							WHEN '3' THEN 'AUTUMN'
							WHEN '4' THEN 'WINTER' END AS SEME_ENM
			, T1.ATTEND
			, GRADE_EXPR_SPEAK
			, GRADE_EXPR_WRITE
			, GRADE_COMP_LISTEN
			, GRADE_COMP_READ
			, ROUND((GRADE_EXPR_SPEAK+GRADE_EXPR_WRITE+GRADE_COMP_LISTEN+GRADE_COMP_READ)/4,0) AS GRADE_AVG
			, T2.NAME AS LECT_CLA_TEA
			, T3.CONTENT AS EVALUE
		FROM
			TB_LCMS_LECT_MAP TLLM
		LEFT JOIN
			TB_LCMS_LECT TLL ON TLLM.LECT_SEQ = TLL.LECT_SEQ
		LEFT JOIN
			TB_LCMS_SEME TLS ON TLS.SEM_YEAR = TLL.LECT_YEAR AND TLS.SEMESTER = TLL.LECT_SEM
		LEFT JOIN
			(
				SELECT
					LECT_CODE
					, MEMBER_CODE
					, ROUND(AVG(GRADE_EXPR_SPEAK),0) AS GRADE_EXPR_SPEAK
					, ROUND(AVG(GRADE_EXPR_WRITE),0) AS GRADE_EXPR_WRITE
					, ROUND(AVG(GRADE_COMP_LISTEN),0) AS GRADE_COMP_LISTEN
					, ROUND(AVG(GRADE_COMP_READ),0) AS GRADE_COMP_READ
				FROM
					TB_LCMS_GRADE
				GROUP BY
					LECT_CODE, MEMBER_CODE
			) TLG ON TLLM.LECT_SEQ = TLG.LECT_CODE AND TLLM.MEMBER_CODE = TLG.MEMBER_CODE
		LEFT JOIN
			(
				SELECT
					LECT_SEQ
					, MEMBER_CODE
					, COUNT(CASE WHEN ATTEND = '1' THEN 1 WHEN ATTEND = '3' THEN 1 END)-TRUNCATE(COUNT(CASE WHEN ATTEND = '3' THEN 1 END)/2,0) AS ATTEND
				FROM
					TB_LCMS_ATTEND
				GROUP BY
					LECT_SEQ, MEMBER_CODE
			) T1 ON T1.LECT_SEQ = TLLM.LECT_SEQ AND T1.MEMBER_CODE = TLLM.MEMBER_CODE
		LEFT JOIN
			TB_LCMS_MEMBER T2 ON T2.MEMBER_CODE = TLL.LECT_CLA_TEA
		LEFT JOIN
			TB_LCMS_EVAL T3 ON T3.LECT_SEQ = TLLM.LECT_SEQ AND T3.MEMBER_CODE = TLLM.MEMBER_CODE
		WHERE
			TLLM.LECT_SEQ = #selLectCode#
		AND
			T3.EVAL_SEQ IS NOT NULL
	]]>
	</select>
	
</sqlMap>